// <auto-generated />
using ExerciseAPI.Connectors.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExerciseAPI.Connectors.Migrations
{
    [DbContext(typeof(ExerciseDbContext))]
    [Migration("20231123123525_ExerciseAPIFirstMigration")]
    partial class ExerciseAPIFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Exercise")
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExerciseAPI.Entity.Entities.ExerciseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MuscularGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MuscularGroupId");

                    b.ToTable("Exercises", "Exercise");
                });

            modelBuilder.Entity("ExerciseAPI.Entity.Entities.MuscularGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MuscularGroups", "Exercise");
                });

            modelBuilder.Entity("ExerciseHasEquivalentExercise", b =>
                {
                    b.Property<int>("EquivalentExerciseId")
                        .HasColumnType("integer");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.HasKey("EquivalentExerciseId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseHasEquivalentExercise", "Exercise");
                });

            modelBuilder.Entity("ExerciseAPI.Entity.Entities.ExerciseEntity", b =>
                {
                    b.HasOne("ExerciseAPI.Entity.Entities.MuscularGroupEntity", "MuscularGroup")
                        .WithMany()
                        .HasForeignKey("MuscularGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MuscularGroup");
                });

            modelBuilder.Entity("ExerciseHasEquivalentExercise", b =>
                {
                    b.HasOne("ExerciseAPI.Entity.Entities.ExerciseEntity", null)
                        .WithMany()
                        .HasForeignKey("EquivalentExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExerciseAPI.Entity.Entities.ExerciseEntity", null)
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
